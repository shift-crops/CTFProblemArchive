#!/usr/bin/env python
from sc_expwn import *  # https://github.com/shift-crops/sc_expwn/blob/master/sc_expwn.py

bin_file = './note'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'172.20.2.2', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = './libc-2.23.so')
env.select('local')

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn):
    note = Note(conn)

    note.exit()
    
class Note:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendafter      = conn.sendafter

    def add(self, size, data):
        pass

    def show(self):
        pass

    def remove(self, n):
        pass

    def exit(self):
        self.sendafter('>> ', '0')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
